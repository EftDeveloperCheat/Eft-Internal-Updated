#pragma once
#include "sdk.hpp"
#include "hook_lib.hpp"

#define JIT_FN( type, name, args ) inline define::jit_hook_c name; type hk_##name args;

namespace impl
{
	namespace hooks
	{
		struct hit_info_t {
			// STRUCT GENERATED BY CHLOE (c)
			int type;
			// STRUCT GENERATED BY CHLOE (c)
			float damage;
			// STRUCT GENERATED BY CHLOE (c)
			char pad_0[ 0x19 ];
			// STRUCT GENERATED BY CHLOE (c)
			geometry::vec3_t hit_point;
			// STRUCT GENERATED BY CHLOE (c)
			geometry::vec3_t hit_origin;
			// STRUCT GENERATED BY CHLOE (c)
			char pad[ 0x10 ];
			// STRUCT GENERATED BY CHLOE (c)
			void* player;
			// STRUCT GENERATED BY CHLOE (c)
		};

		struct tracer_t {
			geometry::vec3_t start, end;
			float time;
		};

		inline std::vector< tracer_t > m_tracers;

		JIT_FN( void, gui_controller_ongui, ( void* instacne ) );
		JIT_FN( void, gui_controller_start, ( void* instance ) );
		JIT_FN( void, gui_controller_update, ( void* instacne ) );
		JIT_FN( void, preloader_ui_update_fn, ( void* instance ) );
		JIT_FN( void, set_fov, ( void* instance, float x, float time, bool applyFovOnCamera ) );
		JIT_FN( std::uintptr_t, get_skinned_mesh_renderer, ( void* instance ) );
		JIT_FN( std::uintptr_t, apply_shot, ( c_player* instance, hit_info_t* damageInfo, int bodyPartType, void* shotId ) );
		JIT_FN( void, initialize_shot, ( void* instance, void* ammo, int fragmentIndex, int seed, geometry::vec3_t origin, geometry::vec3_t direction, float initialSpeed, float speed, float bulletMassKg, float bulletDiameterM, float damage, float penetrationPower, float penetrationChance, float ricochetChance, float fragmentationChance, float deviationChance, int minFragmentsCount, int maxFragmentsCount, void* defaultBallisticCollider, void* randoms, float ballisticCoefficient, c_player* player, void* weapon, int fireIndex, void* parent ) );
		JIT_FN( void, overall_screen_show, ( void* instance, c_profile* profile, void* inventoryController ) );
	}
}